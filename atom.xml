<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-21T14:28:52.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP进程管理PHP-FPM</title>
    <link href="http://yoursite.com/2017/11/20/PHP%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2017/11/20/PHP进程管理/</id>
    <published>2017-11-20T14:33:50.000Z</published>
    <updated>2017-11-21T14:28:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>FPM（FastCGI 进程管理器）用于替换 PHP FastCGI 的大部分附加功能，对于高负载网站是非常有用的。</p><p>它的功能包括：</p><ul><li><p>支持平滑停止/启动的高级进程管理功能；</p></li><li><p>可以工作于不同的 uid/gid/chroot 环境下，并监听不同的端口和使用不同的 php.ini 配置文件（可取代 safe_mode 的设置）；</p></li><li><p>stdout 和 stderr 日志记录;</p></li><li><p>在发生意外情况的时候能够重新启动并缓存被破坏的 opcode;</p></li><li><p>文件上传优化支持;</p></li><li><p>“慢日志” - 记录脚本（不仅记录文件名，还记录 PHP backtrace 信息，可以使用 ptrace或者类似工具读取和分析远程进程的运行数据）运行所导致的异常缓慢;</p></li><li><p>fastcgi_finish_request() - 特殊功能：用于在请求完成和刷新数据后，继续在后台执行耗时的工作（录入视频转换、统计处理等）；</p></li><li><p>动态／静态子进程产生；</p></li><li><p>基本 SAPI 运行状态信息（类似Apache的 mod_status）；</p></li><li><p>基于 php.ini 的配置文件。</p></li></ul><a id="more"></a><h3 id="从-CGI-到-FastCGI"><a href="#从-CGI-到-FastCGI" class="headerlink" title="从 CGI 到 FastCGI"></a>从 CGI 到 FastCGI</h3><p>&#160; &#160; &#160; &#160;早期的 Web 服务，是基于传统的 CGI 协议实现的。每个发送到服务器的请求，都需要经过启动进程、处理请求、结束进程三个步骤，以至于访问量增大时，系统资源（如内存、CPU 等）开销也巨大，导致服务器性能下降甚至服务中断。<br><img src="/images/cgi.gif" alt=""><br>&#160; &#160; &#160; &#160;在 CGI 协议下，解析器的反复加载是性能低下的主要原因。如果让解析器进程长驻内存，那么它只需启动一次，就可以一直执行着，不必每次都重新 fork 进程，这就有了后来的 FastCGI 协议。<br>&#160; &#160; &#160; &#160;事实上 FastCGI 并没有那么简单，为了保证服务的稳定性，他被设计成了多进程调度的模式：<br><img src="/images/fastcgi.png" alt=""></p><p>这个过程同样可以描述为三个步骤：</p><ul><li>首先，初始化 FastCGI 进程管理器，并启动多个 CGI 解释器子进程；</li><li>接着，当请求到达 Web 服务器时，进程管理器选择并连接一个子进程，将环境变量和标准输入发送给它，处理完成后将标准输出和错误信息返还给 Web 服务器；</li><li>最终，子进程关闭连接，继续等待下一个请求的到来；</li></ul><h3 id="PHP-FPM的天生缺陷"><a href="#PHP-FPM的天生缺陷" class="headerlink" title="PHP-FPM的天生缺陷"></a>PHP-FPM的天生缺陷</h3><p>&#160; &#160; &#160; &#160;PHP-FPM 是 PHP 针对 FastCGI 协议的具体实现，也是 PHP 在多种服务器端应用编程端口（SAPI：cgi、fast-cgi、cli、isapi、apache）里使用最普遍、性能最佳的一款进程管理器。它同样实现了类似 Node.js 的父子进程管理模型，确保了 Web 服务的可靠性和高性能。<br>&#160; &#160; &#160; &#160;PHP-FPM 这种模型是非常典型的多进程同步模型，意味着一个请求对应一个进程线程，并且 IO 是同步阻塞的。所以尽管 PHP-FPM 维护着独立的 CGI 进程池、系统也可以很轻松的管理进程的生命周期，但注定无法像 Node.js 那样，一个进程就可以承担巨大的请求压力。<br>&#160; &#160; &#160; &#160;受制于服务器的硬件设施，PHP-FPM 需要指定合理的 php-fpm.conf 配置：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pm.max_children <span class="comment"># 子进程最大数</span></span><br><span class="line">pm.start_servers <span class="comment"># 启动时的子进程数</span></span><br><span class="line">pm.min_spare_servers <span class="comment"># 最小空闲进程数，空闲进程不够时自动补充</span></span><br><span class="line">pm.max_spare_servers <span class="comment"># 最大空闲进程数，空闲进程超过时自动清理</span></span><br><span class="line">pm.max_requests = <span class="number">1000</span> <span class="comment"># 子进程请求数阈值，超过后自动回收</span></span><br></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;PHP 进程本身并不存在内存泄露的问题，每个进程完成请求处理后会回收内存，但是并不会释放给操作系统，这就导致大量内存被 PHP-FPM 占用而无法释放，请求量升高时性能骤降。</p><p>&#160; &#160; &#160; &#160;所以 PHP-FPM 需要控制单个子进程请求次数的阈值。很多人会误以为 max_requests 控制了进程的并发连接数，实际上 PHP-FPM 模式下的进程是单一线程的，请求无法并发。这个参数的真正意义是提供请求计数器的功能，超过阈值数目后自动回收，缓解内存压力。</p><p>&#160; &#160; &#160; &#160;<strong>或许你已经发现了问题的关键：尽管 PHP-FPM 架构卓越，但还是卡在单一进程的性能上了。</strong></p><h3 id="NGINX和FPM工作机制"><a href="#NGINX和FPM工作机制" class="headerlink" title="NGINX和FPM工作机制"></a>NGINX和FPM工作机制</h3><p>&#160; &#160; &#160; &#160;Nginx 提供了 fastcgi 模块来将 http 请求映射为对应的 fastcgi 请求。  Nginx 的fastcgi_params配置文件，其主要完成的工作是将 Nginx 中的变量翻译成 PHP 中能够理解的变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_param  QUERY_STRING       $query_string;</span><br><span class="line">fastcgi_param  REQUEST_METHOD     $request_method;</span><br><span class="line">fastcgi_param  CONTENT_TYPE       $content_type;</span><br><span class="line">fastcgi_param  CONTENT_LENGTH     $content_length;</span><br><span class="line"></span><br><span class="line">fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;</span><br><span class="line">fastcgi_param  REQUEST_URI        $request_uri;</span><br><span class="line">fastcgi_param  DOCUMENT_URI       $document_uri;</span><br><span class="line">fastcgi_param  DOCUMENT_ROOT      $document_root;</span><br><span class="line">fastcgi_param  SERVER_PROTOCOL    $server_protocol;</span><br><span class="line">fastcgi_param  REQUEST_SCHEME     $scheme;</span><br><span class="line">fastcgi_param  HTTPS              $https if_not_empty;</span><br><span class="line"></span><br><span class="line">fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;</span><br><span class="line">fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;</span><br><span class="line"></span><br><span class="line">fastcgi_param  REMOTE_ADDR        $remote_addr;</span><br><span class="line">fastcgi_param  REMOTE_PORT        $remote_port;</span><br><span class="line">fastcgi_param  SERVER_ADDR        $server_addr;</span><br><span class="line">fastcgi_param  SERVER_PORT        $server_port;</span><br><span class="line">fastcgi_param  SERVER_NAME        $server_name;</span><br></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;除此之外，非常重要的就是 fastcgi_pass 指令了，这个指令用于指定 fpm 进程监听的地址，Nginx 会把所有的 php 请求翻译成 fastcgi 请求之后再发送到这个地址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    root           html;</span><br><span class="line">    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    include        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.php.net/manual/zh/install.fpm.php" target="_blank" rel="noopener">PHP-FPM进程管理器</a></li><li><a href="http://taobaofed.org/blog/2015/11/24/nodejs-php-process-manager/" target="_blank" rel="noopener">浅谈Node.js和PHP进程管理</a></li><li><a href="http://blog.jobbole.com/99314/" target="_blank" rel="noopener">深入理解PHP之：Nginx 与 FPM 的工作机制</a></li><li><a href="http://benpaozhe.blog.51cto.com/10239098/1846784" target="_blank" rel="noopener">WebService之nginx+(php-fpm)结构模型剖析及优化</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FPM（FastCGI 进程管理器）用于替换 PHP FastCGI 的大部分附加功能，对于高负载网站是非常有用的。&lt;/p&gt;
&lt;p&gt;它的功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;支持平滑停止/启动的高级进程管理功能；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以工作于不同的 uid/gid/chroot 环境下，并监听不同的端口和使用不同的 php.ini 配置文件（可取代 safe_mode 的设置）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;stdout 和 stderr 日志记录;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在发生意外情况的时候能够重新启动并缓存被破坏的 opcode;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文件上传优化支持;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“慢日志” - 记录脚本（不仅记录文件名，还记录 PHP backtrace 信息，可以使用 ptrace或者类似工具读取和分析远程进程的运行数据）运行所导致的异常缓慢;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fastcgi_finish_request() - 特殊功能：用于在请求完成和刷新数据后，继续在后台执行耗时的工作（录入视频转换、统计处理等）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;动态／静态子进程产生；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基本 SAPI 运行状态信息（类似Apache的 mod_status）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基于 php.ini 的配置文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP多进程初探</title>
    <link href="http://yoursite.com/2017/11/19/PHP%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2017/11/19/PHP多进程初探/</id>
    <published>2017-11-19T08:40:12.000Z</published>
    <updated>2017-11-19T15:08:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;PHP的进程控制支持实现了Unix方式的进程创建, 程序执行, 信号处理以及进程的中断。 <strong><em>进程控制不能被应用在Web服务器环境，当其被用于Web服务环境时可能会带来意外的结果</em></strong>。<br>&#160; &#160; &#160; &#160;PCNTL现在使用了ticks作为信号处理的回调机制，ticks在速度上远远超过了之前的处理机制。 这个变化与“用户ticks”遵循了相同的语义。您可以使用declare() 语句在程序中指定允许发生回调的位置。这使得我们对异步事件处理的开销最小化。在编译PHP时 启用pcntl将始终承担这种开销，不论您的脚本中是否真正使用了pcntl。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Note: 此扩展在 Windows 平台上不可用。</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>&#160; &#160; &#160; &#160;我们都知道PHP是单进程执行的，PHP处理多并发主要是依赖服务器或PHP-FPM的多进程及它们进程的复用，但PHP实现多进程也意义重大，尤其是在后台Cli模式下处理大量数据或运行后台DEMON守护进程时，多进程的优势不用多说。<br>&#160; &#160; &#160; &#160;希望通过本文把PHP多进程的基础理解清楚。<strong>要实现PHP的多进程，需要两个扩展 pcntl和 posix</strong></p><h3 id="子进程创建"><a href="#子进程创建" class="headerlink" title="子进程创建"></a>子进程创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int pcntl_fork ( void )</span><br></pre></td></tr></table></figure><p><strong><em>成功时，在父进程执行线程内返回产生的子进程的PID，在子进程执行线程内返回0。失败时，在 父进程上下文返回-1，不会创建子进程，并且会引发一个PHP错误。</em></strong><br>&#160; &#160; &#160; &#160;pcntl_fork — 在当前进程当前位置产生分支（子进程）。译注：fork是创建了一个子进程，父进程和子进程 都从fork的位置开始向下继续执行，不同的是父进程执行过程中，得到的fork返回值为子进程 号，而子进程得到的是0。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (! function_exists(<span class="string">'pcntl_fork'</span>)) <span class="keyword">die</span>(<span class="string">'PCNTL functions not available on this PHP installation'</span>);</span><br><span class="line"></span><br><span class="line">$pid = pcntl_fork();</span><br><span class="line"><span class="comment">//父进程和子进程都会执行下面代码</span></span><br><span class="line"><span class="keyword">if</span> ($pid == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="comment">//错误处理：创建子进程失败时返回-1.</span></span><br><span class="line">     <span class="keyword">die</span>(<span class="string">'could not fork'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ($pid) &#123;</span><br><span class="line">     <span class="comment">//父进程会得到子进程号，所以这里是父进程执行的逻辑</span></span><br><span class="line">     pcntl_wait($pid, $status); <span class="comment">//等待子进程中断，防止子进程成为僵尸进程。</span></span><br><span class="line">     <span class="keyword">echo</span> <span class="string">"i am parent process, the parent pid is : "</span> . posix_getpid()  . <span class="string">", now the child process exited. \n"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">//子进程得到的$pid为0, 所以这里是子进程执行的逻辑。</span></span><br><span class="line">     <span class="keyword">echo</span> <span class="string">"i am child process, the child pid is posix_getpid() : "</span> . posix_getpid() . <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="子进程管理"><a href="#子进程管理" class="headerlink" title="子进程管理"></a>子进程管理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool pcntl_signal ( int $signo , callback $handler [, bool $restart_syscalls = true ] )</span><br></pre></td></tr></table></figure><p><strong><em>函数pcntl_signal()为signo指定的信号安装一个新 的信号处理器。</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool pcntl_signal_dispatch ( void )</span><br></pre></td></tr></table></figure></p><p><strong><em>函数pcntl_signal_dispatch()调用每个等待信号通过pcntl_signal() 安装的处理器。</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool posix_kill ( int $pid , int $sig )</span><br></pre></td></tr></table></figure></p><p><strong><em>它通过向子进程发送一个信号来操作子进程，在需要要时可以选择给子进程发送进程终止信号来终止子进程</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int pcntl_waitpid ( int $pid , int &amp;$status [, int $options = 0 ] )</span><br></pre></td></tr></table></figure></p><p><strong><em>挂起当前进程的执行直到参数pid指定的进程号的进程退出， 或接收到一个信号要求中断当前进程或调用一个信号处理函数。</em></strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">pcntl_signal(SIGTERM,  function($signo) &#123;</span><br><span class="line">    echo <span class="string">"This signal is called. [$signo] \n"</span>;</span><br><span class="line">    Status::$state = <span class="number">-1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Status</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $state = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$pid = pcntl_fork();</span><br><span class="line"><span class="keyword">if</span> ($pid == <span class="number">-1</span>) &#123;</span><br><span class="line">    die('could not fork');</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($pid) &#123;</span><br><span class="line">    <span class="comment">// parent</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// Dispatching...</span></span><br><span class="line">        pcntl_signal_dispatch();</span><br><span class="line">        <span class="keyword">if</span>(Status::$state == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">// Do something and end loop.</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>($j = <span class="number">0</span>; $j &lt; <span class="number">2</span>; $j++) &#123;</span><br><span class="line">echo <span class="string">"the num of m from child process is : "</span> . $m . <span class="string">" and the pid is : "</span> . posix_getpid() . <span class="string">"\n"</span> ;</span><br><span class="line">            echo <span class="string">"........ \n"</span>;</span><br><span class="line"> $m++;</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    echo <span class="string">"Finish \n"</span>;</span><br><span class="line">    <span class="built_in">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    $res = pcntl_waitpid($pid, $status, WNOHANG);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the child process ends, then end the main process.</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == $res || $res &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    echo <span class="string">"the num of n from parent process is : "</span> . $n . <span class="string">" and the pid is : "</span> . posix_getpid() . <span class="string">"\n"</span>;</span><br><span class="line">    <span class="comment">// Send a signal after 5 seconds..</span></span><br><span class="line">    <span class="keyword">if</span>($n == <span class="number">5</span>)</span><br><span class="line">        posix_kill($pid, SIGTERM);</span><br><span class="line"></span><br><span class="line">    $n++;</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="http://php.net/manual/zh/function.pcntl-signal.php#115984" target="_blank" rel="noopener">此段代码出自PHPDOC</a><br>程序输出：</p><pre><code>the num of n from parent process is : 0 and the pid is : 81the num of m from child process is : 0 and the pid is : 82........the num of n from parent process is : 1 and the pid is : 81the num of m from child process is : 1 and the pid is : 82........the num of n from parent process is : 2 and the pid is : 81the num of m from child process is : 2 and the pid is : 82........the num of n from parent process is : 3 and the pid is : 81the num of m from child process is : 3 and the pid is : 82........the num of n from parent process is : 4 and the pid is : 81the num of m from child process is : 4 and the pid is : 82........the num of n from parent process is : 5 and the pid is : 81the num of m from child process is : 5 and the pid is : 82........the num of n from parent process is : 6 and the pid is : 81This signal is called. [15]Finish</code></pre><h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><p>PHP CLI模式小的多进程应用 <a href="http://www.laruence.com/2009/06/11/930.html" target="_blank" rel="noopener">代码出处</a></p><pre><code class="php"><span class="meta">&lt;?php</span><span class="keyword">if</span>(substr(php_sapi_name(), <span class="number">0</span>, <span class="number">3</span>) !== <span class="string">"cli"</span>) {    <span class="keyword">die</span>(<span class="string">"This Program can only be run in CLI mode"</span>);}set_time_limit(<span class="number">0</span>);$pid = posix_getpid();$user = posix_getlogin();<span class="keyword">echo</span> <span class="string">&lt;&lt;&lt;EOD</span><span class="string">USAGE: [command | expression]</span><span class="string">input php code to excute by fock a new process</span><span class="string">input quit to exit</span><span class="string">EOD;</span><span class="keyword">while</span>(<span class="keyword">true</span>) {    $prompt = <span class="string">"\n{$user}$"</span>;    $input = readline($prompt);    readline_add_history($input);    <span class="keyword">if</span>($input == <span class="string">"quit"</span>) {        <span class="keyword">break</span>;    }    process_execute($input . <span class="string">";"</span>);}<span class="keyword">exit</span>(<span class="number">0</span>);<span class="function"><span class="keyword">function</span> <span class="title">process_execute</span><span class="params">($input)</span> </span>{    $pid = pcntl_fork();    <span class="keyword">if</span>($pid == <span class="number">0</span>) {        $pid = posix_getpid();        <span class="keyword">echo</span> <span class="string">"* Process {$pid} was created, and Executed:\n\n"</span>;        <span class="keyword">eval</span>($input);        <span class="keyword">exit</span>;    } <span class="keyword">else</span> {        $pid = pcntl_wait($status, WUNTRACED);        <span class="keyword">if</span>(pcntl_wifexited($status)) {            <span class="keyword">echo</span> <span class="string">"\n\n* Sub process: {$pid} exited with {$status}.\n"</span>;        }    }}</code></pre><p>上面这个程序使用PHP提供的POSIX和Pcntl系列函数, 实现了一个PHP命令解析器, 主进程负责接受用户输入, 然后fork子进程执行, 并负责回显子进程的结束状态.</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&#160; &#160; &#160; &#160;PHP下的多进程主要是通过PCNTL和POSIX实现的，虽然官方不建议在WEB环境下使用PCNTL多进程，但是在CLI模式下进行批处理以及守护进程的情况下，多进程还是很有用的。<br>&#160; &#160; &#160; &#160;通过上面的例子可以看到多进程有以下优点：  </p><ol><li>使用多进程, 子进程结束以后, 内核会负责回收资源</li><li>使用多进程,子进程异常退出不会导致整个进程Thread退出. 父进程还有机会重建流程.</li><li>一个常驻主进程, 只负责任务分发, 逻辑更清楚.</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="http://www.cnblogs.com/zhenbianshu/p/5676822.html" target="_blank" rel="noopener">初探PHP多进程</a></li><li><a href="http://www.laruence.com/2009/06/11/930.html" target="_blank" rel="noopener">PHP CLI模式下的多进程应用</a></li><li><a href="http://www.php-internals.com/book/?p=chapt08/08-02-thread-process-and-concurrent" target="_blank" rel="noopener">进程，线程和并发</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;PHP的进程控制支持实现了Unix方式的进程创建, 程序执行, 信号处理以及进程的中断。 &lt;strong&gt;&lt;em&gt;进程控制不能被应用在Web服务器环境，当其被用于Web服务环境时可能会带来意外的结果&lt;/em&gt;&lt;/strong&gt;。&lt;br&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;PCNTL现在使用了ticks作为信号处理的回调机制，ticks在速度上远远超过了之前的处理机制。 这个变化与“用户ticks”遵循了相同的语义。您可以使用declare() 语句在程序中指定允许发生回调的位置。这使得我们对异步事件处理的开销最小化。在编译PHP时 启用pcntl将始终承担这种开销，不论您的脚本中是否真正使用了pcntl。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Note: 此扩展在 Windows 平台上不可用。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>进程与线程概念理解</title>
    <link href="http://yoursite.com/2017/11/19/index/"/>
    <id>http://yoursite.com/2017/11/19/index/</id>
    <published>2017-11-19T05:07:00.000Z</published>
    <updated>2017-11-19T08:37:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;线程是什么？要理解这个概念，须要先了解一下操作系统的一些相关概念。大部分操作系统(如Windows、Linux)的任务调度是采用时间片轮转的抢占式调度方式，也就是说一个任务执行一小段时间后强制暂停去执行下一个任务，每个任务轮流执行。任务执行的一小段时间叫做时间片，任务正在执行时的状态叫运行状态，任务执行一段时间后强制暂停去执行下一个任务，被暂停的任务就处于就绪状态等待下一个属于它的时间片的到来。这样每个任务都能得到执行，由于CPU的执行效率非常高，时间片非常短，在各个任务之间快速地切换，给人的感觉就是多个任务在“同时进行”，这也就是我们所说的并发(别觉得并发有多高深，它的实现很复杂，但它的概念很简单，就是一句话：多个任务同时执行)。<br><a id="more"></a></p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>&#160; &#160; &#160; &#160;一个进程，包括了代码、数据和分配给进程的资源（内存），在计算机系统里直观地说一个进程就是一个PID。操作系统保护进程空间不受外部进程干扰，即一个进程不能访问到另一个进程的内存。有时候进程间需要进行通信，这时可以使用操作系统提供进程间通信机制。通常情况下，执行一个可执行文件操作系统会为其创建一个进程以供它运行。但如果该执行文件是基于多进程设计的话，操作系统会在最初的进程上创建出多个进程出来，这些进程间执行的代码是一样，但执行结果可能是一样的，也可能是不一样的。<br>&#160; &#160; &#160; &#160;为什么需要多进程？最直观的想法是，如果操作系统支持多核的话，那么一个执行文件可以在不同的核心上跑；即使是非多核的，在一个进程在等待I/O操作时另一个进程也可以在CPU上跑，提高CPU利用率、程序的效率。<br>&#160; &#160; &#160; &#160;在Linux系统上可以通过fork()来在父进程中创建出子进程。一个进程调用fork()后，系统会先给新进程分配资源，例如存储数据和代码空间。然后把原来进程的所有值、状态都复制到新的进程里，只有少数的值与原来的进程不同，以区分不同的进程。fork()函数会返回两次，一次给父进程（返回子进程的pid或者fork失败信息），一次给子进程（返回0）。至此，两个进程分道扬镳，各自运行在系统里。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_exit</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the exit pid: %d \n"</span>, getpid());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">pid_t</span> pid;</span><br><span class="line"> atexit(print_exit); <span class="comment">// 注册该进程退出时候的回调函数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"i am in the master process, the process id is : %d \n"</span>, getpid());</span><br><span class="line"></span><br><span class="line">pid = fork(); <span class="comment">// 创建新的进程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"something wrong in process fork! \n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"i am in the child process, the child process id is : %d, the parent process id is : %d \n"</span>, getpid(), getppid());</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"child process add count. \n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"i am in the parent process, the parent process id id : %d \n"</span>, getpid());</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"parent process add count. \n"</span>);</span><br><span class="line">sleep(<span class="number">2</span>);</span><br><span class="line">wait(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"At last, count equals to %d \n"</span>, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码输出如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">i am in the master process, the process id is : <span class="number">14690</span></span><br><span class="line">i am in the parent process, the parent process id id : <span class="number">14690</span></span><br><span class="line">parent process add count.</span><br><span class="line">i am in the child process, the child process id is : <span class="number">14691</span>, the parent process id is : <span class="number">14690</span></span><br><span class="line">child process add count.</span><br><span class="line">At last, count equals to <span class="number">1</span></span><br><span class="line">the <span class="built_in">exit</span> pid: <span class="number">14691</span></span><br><span class="line">At last, count equals to <span class="number">1</span></span><br><span class="line">the <span class="built_in">exit</span> pid: <span class="number">14690</span></span><br></pre></td></tr></table></figure></p><p>明显两个进程都执行了count++操作，但由于count是分别处在不同的进程里，所以实质上count在各自进程上只执行了一次。</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>&#160; &#160; &#160; &#160;线程是可执行代码的可分派单元，CPU可单独执行单元。在基于线程的多任务的环境中，所有进程至少有一个线程（主线程），但是它们可以具有多个任务。这意味着单个程序可以并发执行两个或者多个任务。也就是说，线程可以把一个进程分为很多片，每一片都可以是一个独立的流程，CPU可以选择其中的流程来执行。但线程不是进程，不具有PID，且分配的资源属于它的进程，共享着进程的全局变量，也可以有自己“私有”空间。但这明显不同于多进程，进程是一个拷贝的流程，而线程只是把一条河流截成很多条小溪。它没有拷贝这些额外的开销，但是仅仅是现存的一条河流，就被多线程技术几乎无开销地转成很多条小流程，它的伟大就在于它少之又少的系统开销。<br>&#160; &#160; &#160; &#160;Linux中可以使用pthread库来创建线程，但由于pthread不是Linux内核的默认库，所以编译时需要加入pthread库一同编译。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">task1</span><span class="params">(<span class="keyword">void</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">task2</span><span class="params">(<span class="keyword">void</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usr</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">int</span> p1,p2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">usr();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">pthread_t</span> pid1, pid2;</span><br><span class="line"><span class="keyword">pthread_attr_t</span> attr;</span><br><span class="line"><span class="keyword">void</span> *p1, *p2;</span><br><span class="line"><span class="keyword">int</span> ret1 = <span class="number">0</span>, ret2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">pthread_attr_init(&amp;attr);</span><br><span class="line"></span><br><span class="line">pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE);</span><br><span class="line">pthread_create(&amp;pid1, &amp;attr, task1, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE);</span><br><span class="line">pthread_create(&amp;pid2, &amp;attr, task2, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">ret1 = pthread_join(pid1, &amp;p1);</span><br><span class="line">ret2 = pthread_join(pid2, &amp;p2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"after pthread1:ret1=%d\n"</span>, ret1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"after pthread2:ret2=%d\n"</span>, ret2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"at last, count equals to %d\n"</span>, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">task1</span><span class="params">(<span class="keyword">void</span> *arg1)</span> </span>&#123;</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"task1 sleep 2.\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"task1 begin.\n"</span>);</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"task1 thread add count.\n"</span>);</span><br><span class="line">pthread_exit((<span class="keyword">void</span> *)<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">task2</span><span class="params">(<span class="keyword">void</span> *arg2)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"task2 begin\n"</span>);</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"task2 thread add count.\n"</span>);</span><br><span class="line">pthread_exit((<span class="keyword">void</span> *)<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>程序输出<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">task2 begin</span><br><span class="line">task2 thread add count.</span><br><span class="line">task1 sleep <span class="number">2.</span></span><br><span class="line">task1 begin.</span><br><span class="line">task1 thread add count.</span><br><span class="line">after pthread1:ret1=<span class="number">0</span></span><br><span class="line">after pthread2:ret2=<span class="number">0</span></span><br><span class="line">at last, count equals to <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;显示task2先于task1执行，表明了这不是一个同步的程序，线程的运行是单独进行的，由内核线程调度来进行的。为了区别进程，在代码中也加入了count++操作。最后在主线程中输出count=2，即count被计数了2次，子线程被允许使用同一个进程内的共享变量，区别了进程的概念。  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>线程是程序执行的最小单元，而进程是操作系统分配资源的最小单位；</li><li>一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线；</li><li>进程之间相互独立，但同一个进程下的各个线程之间共享程序的内存空间（包括代码段，数据集，堆等）及一些进程级的资源（如打开文件和信号），某进程内的线程在其他进程内不可见；</li><li>调度和切换：线程上下文切换比进程上下文切换要快得多.  </li></ol><p>&#160; &#160; &#160; &#160;总之，线程和进程都是一种抽象的概念，线程是一种比进程更小的抽象，线程和进程都可以实现并发。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://blog.csdn.net/luoweifu/article/details/46595285" target="_blank" rel="noopener">以操作系统的角度叙说进程和线程</a></li><li><a href="http://blog.csdn.net/Jeffery_Gong/article/details/51329305" target="_blank" rel="noopener">多进程和多线程的概念理解</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;线程是什么？要理解这个概念，须要先了解一下操作系统的一些相关概念。大部分操作系统(如Windows、Linux)的任务调度是采用时间片轮转的抢占式调度方式，也就是说一个任务执行一小段时间后强制暂停去执行下一个任务，每个任务轮流执行。任务执行的一小段时间叫做时间片，任务正在执行时的状态叫运行状态，任务执行一段时间后强制暂停去执行下一个任务，被暂停的任务就处于就绪状态等待下一个属于它的时间片的到来。这样每个任务都能得到执行，由于CPU的执行效率非常高，时间片非常短，在各个任务之间快速地切换，给人的感觉就是多个任务在“同时进行”，这也就是我们所说的并发(别觉得并发有多高深，它的实现很复杂，但它的概念很简单，就是一句话：多个任务同时执行)。&lt;br&gt;
    
    </summary>
    
    
      <category term="进程 线程" scheme="http://yoursite.com/tags/%E8%BF%9B%E7%A8%8B-%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
</feed>
